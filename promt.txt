best create a menu like that 
Exam 
    - Mock Test
    - Result 
    - Report 
in Mock test page 
show all categories when i press any categories it will be start mock test exam
model will be same whatever at the moment
the questions will be come randomely 
only thing put next question button
when user press next question, next question will be come and previous button will be show in the same model

when user attemp all questions which category user test 
then result button will show result
when user press show result, result will be show 
and result will save in database even eveery single question success rate will be updated what previously did
result page will be updated 
and report page will assestments for the user which category or questions need to improve
think you are a developer
you know how will do that 
if you need any further questions you can ask me 
thanks

----------------

if i go to this link
http://127.0.0.1:8000/exam/mock-test/start/1/
i see this error 
-----------
now see http://127.0.0.1:8000/exam/mock-test/
in this url you show only one category
but i want all category, sub category, sub sub category 
if any category does not have any questions 
just disable it 
think you are a senior developer 
try best way 

-----------------------------
i see now area category have 237 questions when i press button start test 

----------
in mock test page 
http://127.0.0.1:8000/exam/mock-test/
first show please show all categories, sub categories, sub sub categories for display purpose where user can understand which categories are selected
then html multiple select form for categories, sub categories, sub sub categories
for example 
Area, Sub Area, Sub Sub Area select form
when i select Area, Sub Area, Sub Sub Area
then i press start test button only selected categories questions will be come in the mock test

then user can start mock test 

------------------
git branch -m master main         # rename local branch to 'main'
git branch -d master  # only if you're sure main replaces it
git push -u origin main           # push it to remote
main → production releases

develop → stable development version

feature/* → for new features

hotfix/* → for emergency fixes

release/* → for release prep

bugfix/* → for fixing non-urgent bugs
------------------------
from remote repository develop

-------------------------
http://127.0.0.1:8000/exam/mock-test/ in this page there are three category 
i want first main category name like area, industry i mean all root category

---------------
model :
class Question(models.Model):
    SINGLE = 'single'
    MULTIPLE = 'multiple'
    QUESTION_TYPES = [
        (SINGLE, 'Single Correct Answer'),
        (MULTIPLE, 'Multiple Correct Answers'),
    ]

    question_text = models.TextField()
    question_type = models.CharField(max_length=10, choices=QUESTION_TYPES, default=SINGLE)
    categories = models.ManyToManyField(Category, related_name='questions')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return self.question_text[:100] + "..." if len(self.question_text) > 100 else self.question_text
    
    def get_test_stats(self, user=None):
        """Get test statistics for this question"""
        stats = {'total_tests': 0, 'correct_tests': 0, 'incorrect_tests': 0, 'success_rate': 0}
        
        test_results = self.test_results.all()
        if user:
            test_results = test_results.filter(user=user)
        
        stats['total_tests'] = test_results.count()
        stats['correct_tests'] = test_results.filter(is_correct=True).count()
        stats['incorrect_tests'] = stats['total_tests'] - stats['correct_tests']
        
        if stats['total_tests'] > 0:
            stats['success_rate'] = round((stats['correct_tests'] / stats['total_tests']) * 100, 1)
        
        return stats
and other model:

class Category(models.Model):
    name = models.CharField(max_length=100)
    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='subcategories')
    description = models.TextField(blank=True, null=True)
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name_plural = "Categories"
        ordering = ['name']
    
    def __str__(self):
        if self.parent:
            return f"{self.parent.name} -> {self.name}"
        return self.name
    
    def get_full_path(self):
        """Returns the full hierarchical path of the category"""
        path = [self.name]
        parent = self.parent
        while parent:
            path.insert(0, parent.name)
            parent = parent.parent
        return " -> ".join(path)
    
    def get_level(self):
        """Returns the level/depth of the category (0 for root categories)"""
        level = 0
        parent = self.parent
        while parent:
            level += 1
            parent = parent.parent
        return level
    
    def get_children(self):
        """Returns direct child categories"""
        return self.subcategories.filter(is_active=True)
    
    def get_all_descendants(self):
        """Returns all descendant categories (children, grandchildren, etc.)"""
        descendants = []
        for child in self.get_children():
            descendants.append(child)
            descendants.extend(child.get_all_descendants())
        return descendants
    
    def is_root(self):
        """Returns True if this is a root category (no parent)"""
        return self.parent is None
    
    def is_leaf(self):
        """Returns True if this is a leaf category (no children)"""
        return not self.subcategories.exists()
i give you question and category model 
and i attached a category name list 
please make this question this database format where i can upload this in to my db.sqlite3
one more thing chaeck the category name list and choose which category one or more describe this question
